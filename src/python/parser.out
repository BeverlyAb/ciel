Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT_SINGLELINE
    COMMENT_MULTILINE

Grammar

Rule 0     S' -> script_file
Rule 1     script_file -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> loop_statement
Rule 6     statement -> if_statement
Rule 7     statement -> break_statement
Rule 8     statement -> continue_statement
Rule 9     statement -> return_statement
Rule 10    statement -> include_statement
Rule 11    statement -> compound_statement
Rule 12    statement -> named_function_decl
Rule 13    assignment_statement -> lvalue ASSIGN expression SEMICOLON
Rule 14    assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON
Rule 15    break_statement -> BREAK SEMICOLON
Rule 16    continue_statement -> CONTINUE SEMICOLON
Rule 17    include_statement -> INCLUDE expression SEMICOLON
Rule 18    return_statement -> RETURN SEMICOLON
Rule 19    return_statement -> RETURN expression SEMICOLON
Rule 20    loop_statement -> for_loop_statement
Rule 21    loop_statement -> do_loop_statement
Rule 22    loop_statement -> while_loop_statement
Rule 23    for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement
Rule 24    do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 25    while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement
Rule 26    compound_statement -> LBRACE statement_list RBRACE
Rule 27    if_statement -> IF LPAREN expression RPAREN compound_statement
Rule 28    if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement
Rule 29    lvalue -> ID
Rule 30    lvalue -> lvalue DOT ID
Rule 31    lvalue -> lvalue LBRACKET expression RBRACKET
Rule 32    expression -> binary_expression
Rule 33    binary_expression -> unary_expression
Rule 34    binary_expression -> binary_expression PLUS binary_expression
Rule 35    binary_expression -> binary_expression MINUS binary_expression
Rule 36    binary_expression -> binary_expression OR binary_expression
Rule 37    binary_expression -> binary_expression AND binary_expression
Rule 38    binary_expression -> binary_expression LT binary_expression
Rule 39    binary_expression -> binary_expression GT binary_expression
Rule 40    binary_expression -> binary_expression LEQ binary_expression
Rule 41    binary_expression -> binary_expression GEQ binary_expression
Rule 42    binary_expression -> binary_expression EQ binary_expression
Rule 43    binary_expression -> binary_expression NE binary_expression
Rule 44    unary_expression -> postfix_expression
Rule 45    unary_expression -> STAR unary_expression
Rule 46    unary_expression -> NOT binary_expression
Rule 47    unary_expression -> MINUS binary_expression
Rule 48    postfix_expression -> primary_expression
Rule 49    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 50    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 51    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 52    postfix_expression -> postfix_expression DOT identifier_name
Rule 53    primary_expression -> identifier_name
Rule 54    primary_expression -> list_expression
Rule 55    primary_expression -> constant
Rule 56    primary_expression -> function_decl_expression
Rule 57    primary_expression -> lambda_expression
Rule 58    primary_expression -> dict_expression
Rule 59    primary_expression -> LPAREN expression RPAREN
Rule 60    constant -> INT_LITERAL
Rule 61    constant -> string_literal
Rule 62    constant -> boolean_literal
Rule 63    string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK
Rule 64    string_chars -> <empty>
Rule 65    string_chars -> string_chars string_char
Rule 66    string_char -> UNESCAPED
Rule 67    string_char -> ESCAPE QUOTATION_MARK
Rule 68    string_char -> ESCAPE BACKSLASH
Rule 69    string_char -> ESCAPE BACKSPACE_CHAR
Rule 70    string_char -> ESCAPE FORM_FEED_CHAR
Rule 71    string_char -> ESCAPE LINE_FEED_CHAR
Rule 72    string_char -> ESCAPE CARRIAGE_RETURN_CHAR
Rule 73    string_char -> ESCAPE TAB_CHAR
Rule 74    string_char -> ESCAPE UNICODE_HEX
Rule 75    boolean_literal -> TRUE
Rule 76    boolean_literal -> FALSE
Rule 77    list_expression -> LBRACKET RBRACKET
Rule 78    list_expression -> LBRACKET expression_list RBRACKET
Rule 79    function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement
Rule 80    function_decl_expression -> FUNC LPAREN RPAREN compound_statement
Rule 81    named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement
Rule 82    named_function_decl -> FUNC ID LPAREN RPAREN compound_statement
Rule 83    lambda_expression -> LAMBDA identifier_list COLON expression
Rule 84    lambda_expression -> LAMBDA COLON expression
Rule 85    dict_expression -> LBRACE RBRACE
Rule 86    dict_expression -> LBRACE key_value_list RBRACE
Rule 87    key_value_list -> expression COLON expression
Rule 88    key_value_list -> key_value_list COMMA expression COLON expression
Rule 89    expression_list -> expression
Rule 90    expression_list -> expression_list COMMA expression
Rule 91    identifier_list -> ID
Rule 92    identifier_list -> identifier_list COMMA ID
Rule 93    identifier_name -> ID

Terminals, with rules where they appear

AND                  : 37
ASSIGN               : 13
ASSIGN_PLUS          : 14
BACKSLASH            : 68
BACKSPACE_CHAR       : 69
BREAK                : 15
CARRIAGE_RETURN_CHAR : 72
COLON                : 83 84 87 88
COMMA                : 88 90 92
COMMENT_MULTILINE    : 
COMMENT_SINGLELINE   : 
CONTINUE             : 16
DO                   : 24
DOT                  : 30 52
ELSE                 : 28
EQ                   : 42
ESCAPE               : 67 68 69 70 71 72 73 74
FALSE                : 76
FOR                  : 23
FORM_FEED_CHAR       : 70
FUNC                 : 79 80 81 82
GEQ                  : 41
GT                   : 39
ID                   : 23 29 30 81 82 91 92 93
IF                   : 27 28
IN                   : 23
INCLUDE              : 17
INT_LITERAL          : 60
LAMBDA               : 83 84
LBRACE               : 26 85 86
LBRACKET             : 31 49 77 78
LEQ                  : 40
LINE_FEED_CHAR       : 71
LPAREN               : 23 24 25 27 28 50 51 59 79 80 81 82
LT                   : 38
MINUS                : 35 47
NE                   : 43
NOT                  : 46
OR                   : 36
PLUS                 : 34
QUOTATION_MARK       : 63 63 67
RBRACE               : 26 85 86
RBRACKET             : 31 49 77 78
RETURN               : 18 19
RPAREN               : 23 24 25 27 28 50 51 59 79 80 81 82
SEMICOLON            : 13 14 15 16 17 18 19 24
STAR                 : 45
TAB_CHAR             : 73
TRUE                 : 75
UNESCAPED            : 66
UNICODE_HEX          : 74
WHILE                : 24 25
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4
binary_expression    : 32 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 46 47
boolean_literal      : 62
break_statement      : 7
compound_statement   : 11 23 24 25 27 28 28 79 80 81 82
constant             : 55
continue_statement   : 8
dict_expression      : 58
do_loop_statement    : 21
expression           : 13 14 17 19 23 24 25 27 28 31 49 59 83 84 87 87 88 88 89 90
expression_list      : 50 78 90
for_loop_statement   : 20
function_decl_expression : 56
identifier_list      : 79 81 83 92
identifier_name      : 52 53
if_statement         : 6
include_statement    : 10
key_value_list       : 86 88
lambda_expression    : 57
list_expression      : 54
loop_statement       : 5
lvalue               : 13 14 30 31
named_function_decl  : 12
postfix_expression   : 44 49 50 51 52
primary_expression   : 48
return_statement     : 9
script_file          : 0
statement            : 2 3
statement_list       : 1 3 26
string_char          : 65
string_chars         : 63 65
string_literal       : 61
unary_expression     : 33 45
while_loop_statement : 22

Parsing method: LALR

state 0

    (0) S' -> . script_file
    (1) script_file -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . include_statement
    (11) statement -> . compound_statement
    (12) statement -> . named_function_decl
    (13) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (14) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (20) loop_statement -> . for_loop_statement
    (21) loop_statement -> . do_loop_statement
    (22) loop_statement -> . while_loop_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (15) break_statement -> . BREAK SEMICOLON
    (16) continue_statement -> . CONTINUE SEMICOLON
    (18) return_statement -> . RETURN SEMICOLON
    (19) return_statement -> . RETURN expression SEMICOLON
    (17) include_statement -> . INCLUDE expression SEMICOLON
    (26) compound_statement -> . LBRACE statement_list RBRACE
    (81) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (82) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (29) lvalue -> . ID
    (30) lvalue -> . lvalue DOT ID
    (31) lvalue -> . lvalue LBRACKET expression RBRACKET
    (23) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (24) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (25) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    IF              shift and go to state 21
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 2
    INCLUDE         shift and go to state 19
    LBRACE          shift and go to state 22
    FUNC            shift and go to state 3
    ID              shift and go to state 20
    FOR             shift and go to state 18
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 13
    while_loop_statement           shift and go to state 9
    do_loop_statement              shift and go to state 8
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 10
    lvalue                         shift and go to state 11
    for_loop_statement             shift and go to state 23
    assignment_statement           shift and go to state 12
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 14
    statement                      shift and go to state 15
    include_statement              shift and go to state 7
    statement_list                 shift and go to state 27
    named_function_decl            shift and go to state 16
    if_statement                   shift and go to state 17
    script_file                    shift and go to state 24

state 1

    (24) do_loop_statement -> DO . compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 28

state 2

    (18) return_statement -> RETURN . SEMICOLON
    (19) return_statement -> RETURN . expression SEMICOLON
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    SEMICOLON       shift and go to state 39
    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 53
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 3

    (81) named_function_decl -> FUNC . ID LPAREN identifier_list RPAREN compound_statement
    (82) named_function_decl -> FUNC . ID LPAREN RPAREN compound_statement

    ID              shift and go to state 56


state 4

    (5) statement -> loop_statement .

    IF              reduce using rule 5 (statement -> loop_statement .)
    BREAK           reduce using rule 5 (statement -> loop_statement .)
    CONTINUE        reduce using rule 5 (statement -> loop_statement .)
    RETURN          reduce using rule 5 (statement -> loop_statement .)
    INCLUDE         reduce using rule 5 (statement -> loop_statement .)
    LBRACE          reduce using rule 5 (statement -> loop_statement .)
    FUNC            reduce using rule 5 (statement -> loop_statement .)
    ID              reduce using rule 5 (statement -> loop_statement .)
    FOR             reduce using rule 5 (statement -> loop_statement .)
    DO              reduce using rule 5 (statement -> loop_statement .)
    WHILE           reduce using rule 5 (statement -> loop_statement .)
    $end            reduce using rule 5 (statement -> loop_statement .)
    RBRACE          reduce using rule 5 (statement -> loop_statement .)


state 5

    (7) statement -> break_statement .

    IF              reduce using rule 7 (statement -> break_statement .)
    BREAK           reduce using rule 7 (statement -> break_statement .)
    CONTINUE        reduce using rule 7 (statement -> break_statement .)
    RETURN          reduce using rule 7 (statement -> break_statement .)
    INCLUDE         reduce using rule 7 (statement -> break_statement .)
    LBRACE          reduce using rule 7 (statement -> break_statement .)
    FUNC            reduce using rule 7 (statement -> break_statement .)
    ID              reduce using rule 7 (statement -> break_statement .)
    FOR             reduce using rule 7 (statement -> break_statement .)
    DO              reduce using rule 7 (statement -> break_statement .)
    WHILE           reduce using rule 7 (statement -> break_statement .)
    $end            reduce using rule 7 (statement -> break_statement .)
    RBRACE          reduce using rule 7 (statement -> break_statement .)


state 6

    (25) while_loop_statement -> WHILE . LPAREN expression RPAREN compound_statement

    LPAREN          shift and go to state 57


state 7

    (10) statement -> include_statement .

    IF              reduce using rule 10 (statement -> include_statement .)
    BREAK           reduce using rule 10 (statement -> include_statement .)
    CONTINUE        reduce using rule 10 (statement -> include_statement .)
    RETURN          reduce using rule 10 (statement -> include_statement .)
    INCLUDE         reduce using rule 10 (statement -> include_statement .)
    LBRACE          reduce using rule 10 (statement -> include_statement .)
    FUNC            reduce using rule 10 (statement -> include_statement .)
    ID              reduce using rule 10 (statement -> include_statement .)
    FOR             reduce using rule 10 (statement -> include_statement .)
    DO              reduce using rule 10 (statement -> include_statement .)
    WHILE           reduce using rule 10 (statement -> include_statement .)
    $end            reduce using rule 10 (statement -> include_statement .)
    RBRACE          reduce using rule 10 (statement -> include_statement .)


state 8

    (21) loop_statement -> do_loop_statement .

    RBRACE          reduce using rule 21 (loop_statement -> do_loop_statement .)
    IF              reduce using rule 21 (loop_statement -> do_loop_statement .)
    BREAK           reduce using rule 21 (loop_statement -> do_loop_statement .)
    CONTINUE        reduce using rule 21 (loop_statement -> do_loop_statement .)
    RETURN          reduce using rule 21 (loop_statement -> do_loop_statement .)
    INCLUDE         reduce using rule 21 (loop_statement -> do_loop_statement .)
    LBRACE          reduce using rule 21 (loop_statement -> do_loop_statement .)
    FUNC            reduce using rule 21 (loop_statement -> do_loop_statement .)
    ID              reduce using rule 21 (loop_statement -> do_loop_statement .)
    FOR             reduce using rule 21 (loop_statement -> do_loop_statement .)
    DO              reduce using rule 21 (loop_statement -> do_loop_statement .)
    WHILE           reduce using rule 21 (loop_statement -> do_loop_statement .)
    $end            reduce using rule 21 (loop_statement -> do_loop_statement .)


state 9

    (22) loop_statement -> while_loop_statement .

    RBRACE          reduce using rule 22 (loop_statement -> while_loop_statement .)
    IF              reduce using rule 22 (loop_statement -> while_loop_statement .)
    BREAK           reduce using rule 22 (loop_statement -> while_loop_statement .)
    CONTINUE        reduce using rule 22 (loop_statement -> while_loop_statement .)
    RETURN          reduce using rule 22 (loop_statement -> while_loop_statement .)
    INCLUDE         reduce using rule 22 (loop_statement -> while_loop_statement .)
    LBRACE          reduce using rule 22 (loop_statement -> while_loop_statement .)
    FUNC            reduce using rule 22 (loop_statement -> while_loop_statement .)
    ID              reduce using rule 22 (loop_statement -> while_loop_statement .)
    FOR             reduce using rule 22 (loop_statement -> while_loop_statement .)
    DO              reduce using rule 22 (loop_statement -> while_loop_statement .)
    WHILE           reduce using rule 22 (loop_statement -> while_loop_statement .)
    $end            reduce using rule 22 (loop_statement -> while_loop_statement .)


state 10

    (11) statement -> compound_statement .

    IF              reduce using rule 11 (statement -> compound_statement .)
    BREAK           reduce using rule 11 (statement -> compound_statement .)
    CONTINUE        reduce using rule 11 (statement -> compound_statement .)
    RETURN          reduce using rule 11 (statement -> compound_statement .)
    INCLUDE         reduce using rule 11 (statement -> compound_statement .)
    LBRACE          reduce using rule 11 (statement -> compound_statement .)
    FUNC            reduce using rule 11 (statement -> compound_statement .)
    ID              reduce using rule 11 (statement -> compound_statement .)
    FOR             reduce using rule 11 (statement -> compound_statement .)
    DO              reduce using rule 11 (statement -> compound_statement .)
    WHILE           reduce using rule 11 (statement -> compound_statement .)
    $end            reduce using rule 11 (statement -> compound_statement .)
    RBRACE          reduce using rule 11 (statement -> compound_statement .)


state 11

    (13) assignment_statement -> lvalue . ASSIGN expression SEMICOLON
    (14) assignment_statement -> lvalue . ASSIGN_PLUS expression SEMICOLON
    (30) lvalue -> lvalue . DOT ID
    (31) lvalue -> lvalue . LBRACKET expression RBRACKET

    ASSIGN          shift and go to state 60
    ASSIGN_PLUS     shift and go to state 58
    DOT             shift and go to state 61
    LBRACKET        shift and go to state 59


state 12

    (4) statement -> assignment_statement .

    IF              reduce using rule 4 (statement -> assignment_statement .)
    BREAK           reduce using rule 4 (statement -> assignment_statement .)
    CONTINUE        reduce using rule 4 (statement -> assignment_statement .)
    RETURN          reduce using rule 4 (statement -> assignment_statement .)
    INCLUDE         reduce using rule 4 (statement -> assignment_statement .)
    LBRACE          reduce using rule 4 (statement -> assignment_statement .)
    FUNC            reduce using rule 4 (statement -> assignment_statement .)
    ID              reduce using rule 4 (statement -> assignment_statement .)
    FOR             reduce using rule 4 (statement -> assignment_statement .)
    DO              reduce using rule 4 (statement -> assignment_statement .)
    WHILE           reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACE          reduce using rule 4 (statement -> assignment_statement .)


state 13

    (9) statement -> return_statement .

    IF              reduce using rule 9 (statement -> return_statement .)
    BREAK           reduce using rule 9 (statement -> return_statement .)
    CONTINUE        reduce using rule 9 (statement -> return_statement .)
    RETURN          reduce using rule 9 (statement -> return_statement .)
    INCLUDE         reduce using rule 9 (statement -> return_statement .)
    LBRACE          reduce using rule 9 (statement -> return_statement .)
    FUNC            reduce using rule 9 (statement -> return_statement .)
    ID              reduce using rule 9 (statement -> return_statement .)
    FOR             reduce using rule 9 (statement -> return_statement .)
    DO              reduce using rule 9 (statement -> return_statement .)
    WHILE           reduce using rule 9 (statement -> return_statement .)
    $end            reduce using rule 9 (statement -> return_statement .)
    RBRACE          reduce using rule 9 (statement -> return_statement .)


state 14

    (8) statement -> continue_statement .

    IF              reduce using rule 8 (statement -> continue_statement .)
    BREAK           reduce using rule 8 (statement -> continue_statement .)
    CONTINUE        reduce using rule 8 (statement -> continue_statement .)
    RETURN          reduce using rule 8 (statement -> continue_statement .)
    INCLUDE         reduce using rule 8 (statement -> continue_statement .)
    LBRACE          reduce using rule 8 (statement -> continue_statement .)
    FUNC            reduce using rule 8 (statement -> continue_statement .)
    ID              reduce using rule 8 (statement -> continue_statement .)
    FOR             reduce using rule 8 (statement -> continue_statement .)
    DO              reduce using rule 8 (statement -> continue_statement .)
    WHILE           reduce using rule 8 (statement -> continue_statement .)
    $end            reduce using rule 8 (statement -> continue_statement .)
    RBRACE          reduce using rule 8 (statement -> continue_statement .)


state 15

    (2) statement_list -> statement .

    RBRACE          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    BREAK           reduce using rule 2 (statement_list -> statement .)
    CONTINUE        reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    INCLUDE         reduce using rule 2 (statement_list -> statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement .)
    FUNC            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 16

    (12) statement -> named_function_decl .

    IF              reduce using rule 12 (statement -> named_function_decl .)
    BREAK           reduce using rule 12 (statement -> named_function_decl .)
    CONTINUE        reduce using rule 12 (statement -> named_function_decl .)
    RETURN          reduce using rule 12 (statement -> named_function_decl .)
    INCLUDE         reduce using rule 12 (statement -> named_function_decl .)
    LBRACE          reduce using rule 12 (statement -> named_function_decl .)
    FUNC            reduce using rule 12 (statement -> named_function_decl .)
    ID              reduce using rule 12 (statement -> named_function_decl .)
    FOR             reduce using rule 12 (statement -> named_function_decl .)
    DO              reduce using rule 12 (statement -> named_function_decl .)
    WHILE           reduce using rule 12 (statement -> named_function_decl .)
    $end            reduce using rule 12 (statement -> named_function_decl .)
    RBRACE          reduce using rule 12 (statement -> named_function_decl .)


state 17

    (6) statement -> if_statement .

    IF              reduce using rule 6 (statement -> if_statement .)
    BREAK           reduce using rule 6 (statement -> if_statement .)
    CONTINUE        reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    INCLUDE         reduce using rule 6 (statement -> if_statement .)
    LBRACE          reduce using rule 6 (statement -> if_statement .)
    FUNC            reduce using rule 6 (statement -> if_statement .)
    ID              reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    DO              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 18

    (23) for_loop_statement -> FOR . LPAREN ID IN expression RPAREN compound_statement

    LPAREN          shift and go to state 62


state 19

    (17) include_statement -> INCLUDE . expression SEMICOLON
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 63
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 20

    (29) lvalue -> ID .

    ASSIGN          reduce using rule 29 (lvalue -> ID .)
    ASSIGN_PLUS     reduce using rule 29 (lvalue -> ID .)
    DOT             reduce using rule 29 (lvalue -> ID .)
    LBRACKET        reduce using rule 29 (lvalue -> ID .)


state 21

    (27) if_statement -> IF . LPAREN expression RPAREN compound_statement
    (28) if_statement -> IF . LPAREN expression RPAREN compound_statement ELSE compound_statement

    LPAREN          shift and go to state 64


state 22

    (26) compound_statement -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . include_statement
    (11) statement -> . compound_statement
    (12) statement -> . named_function_decl
    (13) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (14) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (20) loop_statement -> . for_loop_statement
    (21) loop_statement -> . do_loop_statement
    (22) loop_statement -> . while_loop_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (15) break_statement -> . BREAK SEMICOLON
    (16) continue_statement -> . CONTINUE SEMICOLON
    (18) return_statement -> . RETURN SEMICOLON
    (19) return_statement -> . RETURN expression SEMICOLON
    (17) include_statement -> . INCLUDE expression SEMICOLON
    (26) compound_statement -> . LBRACE statement_list RBRACE
    (81) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (82) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (29) lvalue -> . ID
    (30) lvalue -> . lvalue DOT ID
    (31) lvalue -> . lvalue LBRACKET expression RBRACKET
    (23) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (24) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (25) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    IF              shift and go to state 21
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 2
    INCLUDE         shift and go to state 19
    LBRACE          shift and go to state 22
    FUNC            shift and go to state 3
    ID              shift and go to state 20
    FOR             shift and go to state 18
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 13
    while_loop_statement           shift and go to state 9
    do_loop_statement              shift and go to state 8
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 10
    lvalue                         shift and go to state 11
    for_loop_statement             shift and go to state 23
    assignment_statement           shift and go to state 12
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 14
    statement                      shift and go to state 15
    include_statement              shift and go to state 7
    statement_list                 shift and go to state 65
    named_function_decl            shift and go to state 16
    if_statement                   shift and go to state 17

state 23

    (20) loop_statement -> for_loop_statement .

    RBRACE          reduce using rule 20 (loop_statement -> for_loop_statement .)
    IF              reduce using rule 20 (loop_statement -> for_loop_statement .)
    BREAK           reduce using rule 20 (loop_statement -> for_loop_statement .)
    CONTINUE        reduce using rule 20 (loop_statement -> for_loop_statement .)
    RETURN          reduce using rule 20 (loop_statement -> for_loop_statement .)
    INCLUDE         reduce using rule 20 (loop_statement -> for_loop_statement .)
    LBRACE          reduce using rule 20 (loop_statement -> for_loop_statement .)
    FUNC            reduce using rule 20 (loop_statement -> for_loop_statement .)
    ID              reduce using rule 20 (loop_statement -> for_loop_statement .)
    FOR             reduce using rule 20 (loop_statement -> for_loop_statement .)
    DO              reduce using rule 20 (loop_statement -> for_loop_statement .)
    WHILE           reduce using rule 20 (loop_statement -> for_loop_statement .)
    $end            reduce using rule 20 (loop_statement -> for_loop_statement .)


state 24

    (0) S' -> script_file .



state 25

    (15) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 66


state 26

    (16) continue_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 67


state 27

    (1) script_file -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . include_statement
    (11) statement -> . compound_statement
    (12) statement -> . named_function_decl
    (13) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (14) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (20) loop_statement -> . for_loop_statement
    (21) loop_statement -> . do_loop_statement
    (22) loop_statement -> . while_loop_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (15) break_statement -> . BREAK SEMICOLON
    (16) continue_statement -> . CONTINUE SEMICOLON
    (18) return_statement -> . RETURN SEMICOLON
    (19) return_statement -> . RETURN expression SEMICOLON
    (17) include_statement -> . INCLUDE expression SEMICOLON
    (26) compound_statement -> . LBRACE statement_list RBRACE
    (81) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (82) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (29) lvalue -> . ID
    (30) lvalue -> . lvalue DOT ID
    (31) lvalue -> . lvalue LBRACKET expression RBRACKET
    (23) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (24) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (25) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    $end            reduce using rule 1 (script_file -> statement_list .)
    IF              shift and go to state 21
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 2
    INCLUDE         shift and go to state 19
    LBRACE          shift and go to state 22
    FUNC            shift and go to state 3
    ID              shift and go to state 20
    FOR             shift and go to state 18
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 13
    while_loop_statement           shift and go to state 9
    do_loop_statement              shift and go to state 8
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 10
    lvalue                         shift and go to state 11
    for_loop_statement             shift and go to state 23
    assignment_statement           shift and go to state 12
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 14
    statement                      shift and go to state 68
    include_statement              shift and go to state 7
    named_function_decl            shift and go to state 16
    if_statement                   shift and go to state 17

state 28

    (24) do_loop_statement -> DO compound_statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 69


state 29

    (79) function_decl_expression -> FUNC . LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> FUNC . LPAREN RPAREN compound_statement

    LPAREN          shift and go to state 70


state 30

    (33) binary_expression -> unary_expression .

    PLUS            reduce using rule 33 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 33 (binary_expression -> unary_expression .)
    OR              reduce using rule 33 (binary_expression -> unary_expression .)
    AND             reduce using rule 33 (binary_expression -> unary_expression .)
    LT              reduce using rule 33 (binary_expression -> unary_expression .)
    GT              reduce using rule 33 (binary_expression -> unary_expression .)
    LEQ             reduce using rule 33 (binary_expression -> unary_expression .)
    GEQ             reduce using rule 33 (binary_expression -> unary_expression .)
    EQ              reduce using rule 33 (binary_expression -> unary_expression .)
    NE              reduce using rule 33 (binary_expression -> unary_expression .)
    SEMICOLON       reduce using rule 33 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 33 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 33 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 33 (binary_expression -> unary_expression .)
    COLON           reduce using rule 33 (binary_expression -> unary_expression .)
    LBRACKET        reduce using rule 33 (binary_expression -> unary_expression .)
    LPAREN          reduce using rule 33 (binary_expression -> unary_expression .)
    DOT             reduce using rule 33 (binary_expression -> unary_expression .)
    RBRACE          reduce using rule 33 (binary_expression -> unary_expression .)


state 31

    (57) primary_expression -> lambda_expression .

    PLUS            reduce using rule 57 (primary_expression -> lambda_expression .)
    MINUS           reduce using rule 57 (primary_expression -> lambda_expression .)
    OR              reduce using rule 57 (primary_expression -> lambda_expression .)
    AND             reduce using rule 57 (primary_expression -> lambda_expression .)
    LT              reduce using rule 57 (primary_expression -> lambda_expression .)
    GT              reduce using rule 57 (primary_expression -> lambda_expression .)
    LEQ             reduce using rule 57 (primary_expression -> lambda_expression .)
    GEQ             reduce using rule 57 (primary_expression -> lambda_expression .)
    EQ              reduce using rule 57 (primary_expression -> lambda_expression .)
    NE              reduce using rule 57 (primary_expression -> lambda_expression .)
    SEMICOLON       reduce using rule 57 (primary_expression -> lambda_expression .)
    RBRACKET        reduce using rule 57 (primary_expression -> lambda_expression .)
    COMMA           reduce using rule 57 (primary_expression -> lambda_expression .)
    RPAREN          reduce using rule 57 (primary_expression -> lambda_expression .)
    COLON           reduce using rule 57 (primary_expression -> lambda_expression .)
    LBRACKET        reduce using rule 57 (primary_expression -> lambda_expression .)
    LPAREN          reduce using rule 57 (primary_expression -> lambda_expression .)
    DOT             reduce using rule 57 (primary_expression -> lambda_expression .)
    RBRACE          reduce using rule 57 (primary_expression -> lambda_expression .)


state 32

    (62) constant -> boolean_literal .

    LBRACKET        reduce using rule 62 (constant -> boolean_literal .)
    LPAREN          reduce using rule 62 (constant -> boolean_literal .)
    DOT             reduce using rule 62 (constant -> boolean_literal .)
    PLUS            reduce using rule 62 (constant -> boolean_literal .)
    MINUS           reduce using rule 62 (constant -> boolean_literal .)
    OR              reduce using rule 62 (constant -> boolean_literal .)
    AND             reduce using rule 62 (constant -> boolean_literal .)
    LT              reduce using rule 62 (constant -> boolean_literal .)
    GT              reduce using rule 62 (constant -> boolean_literal .)
    LEQ             reduce using rule 62 (constant -> boolean_literal .)
    GEQ             reduce using rule 62 (constant -> boolean_literal .)
    EQ              reduce using rule 62 (constant -> boolean_literal .)
    NE              reduce using rule 62 (constant -> boolean_literal .)
    RPAREN          reduce using rule 62 (constant -> boolean_literal .)
    SEMICOLON       reduce using rule 62 (constant -> boolean_literal .)
    RBRACKET        reduce using rule 62 (constant -> boolean_literal .)
    COMMA           reduce using rule 62 (constant -> boolean_literal .)
    COLON           reduce using rule 62 (constant -> boolean_literal .)
    RBRACE          reduce using rule 62 (constant -> boolean_literal .)


state 33

    (77) list_expression -> LBRACKET . RBRACKET
    (78) list_expression -> LBRACKET . expression_list RBRACKET
    (89) expression_list -> . expression
    (90) expression_list -> . expression_list COMMA expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    RBRACKET        shift and go to state 72
    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    expression_list                shift and go to state 71
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 73
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 34

    (63) string_literal -> QUOTATION_MARK . string_chars QUOTATION_MARK
    (64) string_chars -> .
    (65) string_chars -> . string_chars string_char

    QUOTATION_MARK  reduce using rule 64 (string_chars -> .)
    UNESCAPED       reduce using rule 64 (string_chars -> .)
    ESCAPE          reduce using rule 64 (string_chars -> .)

    string_chars                   shift and go to state 74

state 35

    (45) unary_expression -> STAR . unary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    unary_expression               shift and go to state 75
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 36

    (53) primary_expression -> identifier_name .

    PLUS            reduce using rule 53 (primary_expression -> identifier_name .)
    MINUS           reduce using rule 53 (primary_expression -> identifier_name .)
    OR              reduce using rule 53 (primary_expression -> identifier_name .)
    AND             reduce using rule 53 (primary_expression -> identifier_name .)
    LT              reduce using rule 53 (primary_expression -> identifier_name .)
    GT              reduce using rule 53 (primary_expression -> identifier_name .)
    LEQ             reduce using rule 53 (primary_expression -> identifier_name .)
    GEQ             reduce using rule 53 (primary_expression -> identifier_name .)
    EQ              reduce using rule 53 (primary_expression -> identifier_name .)
    NE              reduce using rule 53 (primary_expression -> identifier_name .)
    SEMICOLON       reduce using rule 53 (primary_expression -> identifier_name .)
    RBRACKET        reduce using rule 53 (primary_expression -> identifier_name .)
    COMMA           reduce using rule 53 (primary_expression -> identifier_name .)
    RPAREN          reduce using rule 53 (primary_expression -> identifier_name .)
    COLON           reduce using rule 53 (primary_expression -> identifier_name .)
    LBRACKET        reduce using rule 53 (primary_expression -> identifier_name .)
    LPAREN          reduce using rule 53 (primary_expression -> identifier_name .)
    DOT             reduce using rule 53 (primary_expression -> identifier_name .)
    RBRACE          reduce using rule 53 (primary_expression -> identifier_name .)


state 37

    (75) boolean_literal -> TRUE .

    PLUS            reduce using rule 75 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 75 (boolean_literal -> TRUE .)
    OR              reduce using rule 75 (boolean_literal -> TRUE .)
    AND             reduce using rule 75 (boolean_literal -> TRUE .)
    LT              reduce using rule 75 (boolean_literal -> TRUE .)
    GT              reduce using rule 75 (boolean_literal -> TRUE .)
    LEQ             reduce using rule 75 (boolean_literal -> TRUE .)
    GEQ             reduce using rule 75 (boolean_literal -> TRUE .)
    EQ              reduce using rule 75 (boolean_literal -> TRUE .)
    NE              reduce using rule 75 (boolean_literal -> TRUE .)
    SEMICOLON       reduce using rule 75 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 75 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 75 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 75 (boolean_literal -> TRUE .)
    COLON           reduce using rule 75 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 75 (boolean_literal -> TRUE .)
    LPAREN          reduce using rule 75 (boolean_literal -> TRUE .)
    DOT             reduce using rule 75 (boolean_literal -> TRUE .)
    RBRACE          reduce using rule 75 (boolean_literal -> TRUE .)


state 38

    (47) unary_expression -> MINUS . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 76
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 39

    (18) return_statement -> RETURN SEMICOLON .

    IF              reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    INCLUDE         reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    FUNC            reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    $end            reduce using rule 18 (return_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 18 (return_statement -> RETURN SEMICOLON .)


state 40

    (44) unary_expression -> postfix_expression .
    (49) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (50) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (51) postfix_expression -> postfix_expression . LPAREN RPAREN
    (52) postfix_expression -> postfix_expression . DOT identifier_name

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    PLUS            reduce using rule 44 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 44 (unary_expression -> postfix_expression .)
    OR              reduce using rule 44 (unary_expression -> postfix_expression .)
    AND             reduce using rule 44 (unary_expression -> postfix_expression .)
    LT              reduce using rule 44 (unary_expression -> postfix_expression .)
    GT              reduce using rule 44 (unary_expression -> postfix_expression .)
    LEQ             reduce using rule 44 (unary_expression -> postfix_expression .)
    GEQ             reduce using rule 44 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 44 (unary_expression -> postfix_expression .)
    NE              reduce using rule 44 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 44 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 44 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 44 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 44 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 44 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 44 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 77
    LPAREN          shift and go to state 78
    DOT             shift and go to state 79

  ! LBRACKET        [ reduce using rule 44 (unary_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 44 (unary_expression -> postfix_expression .) ]
  ! DOT             [ reduce using rule 44 (unary_expression -> postfix_expression .) ]


state 41

    (55) primary_expression -> constant .

    PLUS            reduce using rule 55 (primary_expression -> constant .)
    MINUS           reduce using rule 55 (primary_expression -> constant .)
    OR              reduce using rule 55 (primary_expression -> constant .)
    AND             reduce using rule 55 (primary_expression -> constant .)
    LT              reduce using rule 55 (primary_expression -> constant .)
    GT              reduce using rule 55 (primary_expression -> constant .)
    LEQ             reduce using rule 55 (primary_expression -> constant .)
    GEQ             reduce using rule 55 (primary_expression -> constant .)
    EQ              reduce using rule 55 (primary_expression -> constant .)
    NE              reduce using rule 55 (primary_expression -> constant .)
    SEMICOLON       reduce using rule 55 (primary_expression -> constant .)
    RBRACKET        reduce using rule 55 (primary_expression -> constant .)
    COMMA           reduce using rule 55 (primary_expression -> constant .)
    RPAREN          reduce using rule 55 (primary_expression -> constant .)
    COLON           reduce using rule 55 (primary_expression -> constant .)
    LBRACKET        reduce using rule 55 (primary_expression -> constant .)
    LPAREN          reduce using rule 55 (primary_expression -> constant .)
    DOT             reduce using rule 55 (primary_expression -> constant .)
    RBRACE          reduce using rule 55 (primary_expression -> constant .)


state 42

    (61) constant -> string_literal .

    LBRACKET        reduce using rule 61 (constant -> string_literal .)
    LPAREN          reduce using rule 61 (constant -> string_literal .)
    DOT             reduce using rule 61 (constant -> string_literal .)
    PLUS            reduce using rule 61 (constant -> string_literal .)
    MINUS           reduce using rule 61 (constant -> string_literal .)
    OR              reduce using rule 61 (constant -> string_literal .)
    AND             reduce using rule 61 (constant -> string_literal .)
    LT              reduce using rule 61 (constant -> string_literal .)
    GT              reduce using rule 61 (constant -> string_literal .)
    LEQ             reduce using rule 61 (constant -> string_literal .)
    GEQ             reduce using rule 61 (constant -> string_literal .)
    EQ              reduce using rule 61 (constant -> string_literal .)
    NE              reduce using rule 61 (constant -> string_literal .)
    RPAREN          reduce using rule 61 (constant -> string_literal .)
    SEMICOLON       reduce using rule 61 (constant -> string_literal .)
    RBRACKET        reduce using rule 61 (constant -> string_literal .)
    COMMA           reduce using rule 61 (constant -> string_literal .)
    COLON           reduce using rule 61 (constant -> string_literal .)
    RBRACE          reduce using rule 61 (constant -> string_literal .)


state 43

    (54) primary_expression -> list_expression .

    PLUS            reduce using rule 54 (primary_expression -> list_expression .)
    MINUS           reduce using rule 54 (primary_expression -> list_expression .)
    OR              reduce using rule 54 (primary_expression -> list_expression .)
    AND             reduce using rule 54 (primary_expression -> list_expression .)
    LT              reduce using rule 54 (primary_expression -> list_expression .)
    GT              reduce using rule 54 (primary_expression -> list_expression .)
    LEQ             reduce using rule 54 (primary_expression -> list_expression .)
    GEQ             reduce using rule 54 (primary_expression -> list_expression .)
    EQ              reduce using rule 54 (primary_expression -> list_expression .)
    NE              reduce using rule 54 (primary_expression -> list_expression .)
    SEMICOLON       reduce using rule 54 (primary_expression -> list_expression .)
    RBRACKET        reduce using rule 54 (primary_expression -> list_expression .)
    COMMA           reduce using rule 54 (primary_expression -> list_expression .)
    RPAREN          reduce using rule 54 (primary_expression -> list_expression .)
    COLON           reduce using rule 54 (primary_expression -> list_expression .)
    LBRACKET        reduce using rule 54 (primary_expression -> list_expression .)
    LPAREN          reduce using rule 54 (primary_expression -> list_expression .)
    DOT             reduce using rule 54 (primary_expression -> list_expression .)
    RBRACE          reduce using rule 54 (primary_expression -> list_expression .)


state 44

    (60) constant -> INT_LITERAL .

    LBRACKET        reduce using rule 60 (constant -> INT_LITERAL .)
    LPAREN          reduce using rule 60 (constant -> INT_LITERAL .)
    DOT             reduce using rule 60 (constant -> INT_LITERAL .)
    PLUS            reduce using rule 60 (constant -> INT_LITERAL .)
    MINUS           reduce using rule 60 (constant -> INT_LITERAL .)
    OR              reduce using rule 60 (constant -> INT_LITERAL .)
    AND             reduce using rule 60 (constant -> INT_LITERAL .)
    LT              reduce using rule 60 (constant -> INT_LITERAL .)
    GT              reduce using rule 60 (constant -> INT_LITERAL .)
    LEQ             reduce using rule 60 (constant -> INT_LITERAL .)
    GEQ             reduce using rule 60 (constant -> INT_LITERAL .)
    EQ              reduce using rule 60 (constant -> INT_LITERAL .)
    NE              reduce using rule 60 (constant -> INT_LITERAL .)
    RPAREN          reduce using rule 60 (constant -> INT_LITERAL .)
    SEMICOLON       reduce using rule 60 (constant -> INT_LITERAL .)
    RBRACKET        reduce using rule 60 (constant -> INT_LITERAL .)
    COMMA           reduce using rule 60 (constant -> INT_LITERAL .)
    COLON           reduce using rule 60 (constant -> INT_LITERAL .)
    RBRACE          reduce using rule 60 (constant -> INT_LITERAL .)


state 45

    (48) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 48 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 48 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 48 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 48 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 48 (postfix_expression -> primary_expression .)
    OR              reduce using rule 48 (postfix_expression -> primary_expression .)
    AND             reduce using rule 48 (postfix_expression -> primary_expression .)
    LT              reduce using rule 48 (postfix_expression -> primary_expression .)
    GT              reduce using rule 48 (postfix_expression -> primary_expression .)
    LEQ             reduce using rule 48 (postfix_expression -> primary_expression .)
    GEQ             reduce using rule 48 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 48 (postfix_expression -> primary_expression .)
    NE              reduce using rule 48 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 48 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 48 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 48 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 48 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 48 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 48 (postfix_expression -> primary_expression .)


state 46

    (59) primary_expression -> LPAREN . expression RPAREN
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 80
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 47

    (56) primary_expression -> function_decl_expression .

    PLUS            reduce using rule 56 (primary_expression -> function_decl_expression .)
    MINUS           reduce using rule 56 (primary_expression -> function_decl_expression .)
    OR              reduce using rule 56 (primary_expression -> function_decl_expression .)
    AND             reduce using rule 56 (primary_expression -> function_decl_expression .)
    LT              reduce using rule 56 (primary_expression -> function_decl_expression .)
    GT              reduce using rule 56 (primary_expression -> function_decl_expression .)
    LEQ             reduce using rule 56 (primary_expression -> function_decl_expression .)
    GEQ             reduce using rule 56 (primary_expression -> function_decl_expression .)
    EQ              reduce using rule 56 (primary_expression -> function_decl_expression .)
    NE              reduce using rule 56 (primary_expression -> function_decl_expression .)
    SEMICOLON       reduce using rule 56 (primary_expression -> function_decl_expression .)
    RBRACKET        reduce using rule 56 (primary_expression -> function_decl_expression .)
    COMMA           reduce using rule 56 (primary_expression -> function_decl_expression .)
    RPAREN          reduce using rule 56 (primary_expression -> function_decl_expression .)
    COLON           reduce using rule 56 (primary_expression -> function_decl_expression .)
    LBRACKET        reduce using rule 56 (primary_expression -> function_decl_expression .)
    LPAREN          reduce using rule 56 (primary_expression -> function_decl_expression .)
    DOT             reduce using rule 56 (primary_expression -> function_decl_expression .)
    RBRACE          reduce using rule 56 (primary_expression -> function_decl_expression .)


state 48

    (93) identifier_name -> ID .

    LBRACKET        reduce using rule 93 (identifier_name -> ID .)
    LPAREN          reduce using rule 93 (identifier_name -> ID .)
    DOT             reduce using rule 93 (identifier_name -> ID .)
    PLUS            reduce using rule 93 (identifier_name -> ID .)
    MINUS           reduce using rule 93 (identifier_name -> ID .)
    OR              reduce using rule 93 (identifier_name -> ID .)
    AND             reduce using rule 93 (identifier_name -> ID .)
    LT              reduce using rule 93 (identifier_name -> ID .)
    GT              reduce using rule 93 (identifier_name -> ID .)
    LEQ             reduce using rule 93 (identifier_name -> ID .)
    GEQ             reduce using rule 93 (identifier_name -> ID .)
    EQ              reduce using rule 93 (identifier_name -> ID .)
    NE              reduce using rule 93 (identifier_name -> ID .)
    RBRACKET        reduce using rule 93 (identifier_name -> ID .)
    SEMICOLON       reduce using rule 93 (identifier_name -> ID .)
    COMMA           reduce using rule 93 (identifier_name -> ID .)
    RPAREN          reduce using rule 93 (identifier_name -> ID .)
    COLON           reduce using rule 93 (identifier_name -> ID .)
    RBRACE          reduce using rule 93 (identifier_name -> ID .)


state 49

    (85) dict_expression -> LBRACE . RBRACE
    (86) dict_expression -> LBRACE . key_value_list RBRACE
    (87) key_value_list -> . expression COLON expression
    (88) key_value_list -> . key_value_list COMMA expression COLON expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    RBRACE          shift and go to state 81
    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    list_expression                shift and go to state 43
    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    key_value_list                 shift and go to state 82
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 83
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 50

    (76) boolean_literal -> FALSE .

    PLUS            reduce using rule 76 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 76 (boolean_literal -> FALSE .)
    OR              reduce using rule 76 (boolean_literal -> FALSE .)
    AND             reduce using rule 76 (boolean_literal -> FALSE .)
    LT              reduce using rule 76 (boolean_literal -> FALSE .)
    GT              reduce using rule 76 (boolean_literal -> FALSE .)
    LEQ             reduce using rule 76 (boolean_literal -> FALSE .)
    GEQ             reduce using rule 76 (boolean_literal -> FALSE .)
    EQ              reduce using rule 76 (boolean_literal -> FALSE .)
    NE              reduce using rule 76 (boolean_literal -> FALSE .)
    SEMICOLON       reduce using rule 76 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 76 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 76 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 76 (boolean_literal -> FALSE .)
    COLON           reduce using rule 76 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 76 (boolean_literal -> FALSE .)
    LPAREN          reduce using rule 76 (boolean_literal -> FALSE .)
    DOT             reduce using rule 76 (boolean_literal -> FALSE .)
    RBRACE          reduce using rule 76 (boolean_literal -> FALSE .)


state 51

    (32) expression -> binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    RBRACKET        reduce using rule 32 (expression -> binary_expression .)
    COMMA           reduce using rule 32 (expression -> binary_expression .)
    RPAREN          reduce using rule 32 (expression -> binary_expression .)
    COLON           reduce using rule 32 (expression -> binary_expression .)
    RBRACE          reduce using rule 32 (expression -> binary_expression .)
    SEMICOLON       reduce using rule 32 (expression -> binary_expression .)
    LBRACKET        reduce using rule 32 (expression -> binary_expression .)
    LPAREN          reduce using rule 32 (expression -> binary_expression .)
    DOT             reduce using rule 32 (expression -> binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88
    OR              shift and go to state 93
    AND             shift and go to state 84
    LT              shift and go to state 90
    GT              shift and go to state 86
    LEQ             shift and go to state 89
    GEQ             shift and go to state 85
    EQ              shift and go to state 92
    NE              shift and go to state 87

  ! PLUS            [ reduce using rule 32 (expression -> binary_expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> binary_expression .) ]
  ! OR              [ reduce using rule 32 (expression -> binary_expression .) ]
  ! AND             [ reduce using rule 32 (expression -> binary_expression .) ]
  ! LT              [ reduce using rule 32 (expression -> binary_expression .) ]
  ! GT              [ reduce using rule 32 (expression -> binary_expression .) ]
  ! LEQ             [ reduce using rule 32 (expression -> binary_expression .) ]
  ! GEQ             [ reduce using rule 32 (expression -> binary_expression .) ]
  ! EQ              [ reduce using rule 32 (expression -> binary_expression .) ]
  ! NE              [ reduce using rule 32 (expression -> binary_expression .) ]


state 52

    (46) unary_expression -> NOT . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 94
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 53

    (19) return_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 95


state 54

    (58) primary_expression -> dict_expression .

    PLUS            reduce using rule 58 (primary_expression -> dict_expression .)
    MINUS           reduce using rule 58 (primary_expression -> dict_expression .)
    OR              reduce using rule 58 (primary_expression -> dict_expression .)
    AND             reduce using rule 58 (primary_expression -> dict_expression .)
    LT              reduce using rule 58 (primary_expression -> dict_expression .)
    GT              reduce using rule 58 (primary_expression -> dict_expression .)
    LEQ             reduce using rule 58 (primary_expression -> dict_expression .)
    GEQ             reduce using rule 58 (primary_expression -> dict_expression .)
    EQ              reduce using rule 58 (primary_expression -> dict_expression .)
    NE              reduce using rule 58 (primary_expression -> dict_expression .)
    SEMICOLON       reduce using rule 58 (primary_expression -> dict_expression .)
    RBRACKET        reduce using rule 58 (primary_expression -> dict_expression .)
    COMMA           reduce using rule 58 (primary_expression -> dict_expression .)
    RPAREN          reduce using rule 58 (primary_expression -> dict_expression .)
    COLON           reduce using rule 58 (primary_expression -> dict_expression .)
    LBRACKET        reduce using rule 58 (primary_expression -> dict_expression .)
    LPAREN          reduce using rule 58 (primary_expression -> dict_expression .)
    DOT             reduce using rule 58 (primary_expression -> dict_expression .)
    RBRACE          reduce using rule 58 (primary_expression -> dict_expression .)


state 55

    (83) lambda_expression -> LAMBDA . identifier_list COLON expression
    (84) lambda_expression -> LAMBDA . COLON expression
    (91) identifier_list -> . ID
    (92) identifier_list -> . identifier_list COMMA ID

    COLON           shift and go to state 96
    ID              shift and go to state 98

    identifier_list                shift and go to state 97

state 56

    (81) named_function_decl -> FUNC ID . LPAREN identifier_list RPAREN compound_statement
    (82) named_function_decl -> FUNC ID . LPAREN RPAREN compound_statement

    LPAREN          shift and go to state 99


state 57

    (25) while_loop_statement -> WHILE LPAREN . expression RPAREN compound_statement
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 100
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 58

    (14) assignment_statement -> lvalue ASSIGN_PLUS . expression SEMICOLON
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 101
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 59

    (31) lvalue -> lvalue LBRACKET . expression RBRACKET
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 102
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 60

    (13) assignment_statement -> lvalue ASSIGN . expression SEMICOLON
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 103
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 61

    (30) lvalue -> lvalue DOT . ID

    ID              shift and go to state 104


state 62

    (23) for_loop_statement -> FOR LPAREN . ID IN expression RPAREN compound_statement

    ID              shift and go to state 105


state 63

    (17) include_statement -> INCLUDE expression . SEMICOLON

    SEMICOLON       shift and go to state 106


state 64

    (27) if_statement -> IF LPAREN . expression RPAREN compound_statement
    (28) if_statement -> IF LPAREN . expression RPAREN compound_statement ELSE compound_statement
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 107
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 65

    (26) compound_statement -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . include_statement
    (11) statement -> . compound_statement
    (12) statement -> . named_function_decl
    (13) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (14) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (20) loop_statement -> . for_loop_statement
    (21) loop_statement -> . do_loop_statement
    (22) loop_statement -> . while_loop_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (15) break_statement -> . BREAK SEMICOLON
    (16) continue_statement -> . CONTINUE SEMICOLON
    (18) return_statement -> . RETURN SEMICOLON
    (19) return_statement -> . RETURN expression SEMICOLON
    (17) include_statement -> . INCLUDE expression SEMICOLON
    (26) compound_statement -> . LBRACE statement_list RBRACE
    (81) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (82) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (29) lvalue -> . ID
    (30) lvalue -> . lvalue DOT ID
    (31) lvalue -> . lvalue LBRACKET expression RBRACKET
    (23) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (24) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (25) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    RBRACE          shift and go to state 108
    IF              shift and go to state 21
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 2
    INCLUDE         shift and go to state 19
    LBRACE          shift and go to state 22
    FUNC            shift and go to state 3
    ID              shift and go to state 20
    FOR             shift and go to state 18
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 13
    while_loop_statement           shift and go to state 9
    do_loop_statement              shift and go to state 8
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 10
    lvalue                         shift and go to state 11
    for_loop_statement             shift and go to state 23
    assignment_statement           shift and go to state 12
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 14
    statement                      shift and go to state 68
    include_statement              shift and go to state 7
    named_function_decl            shift and go to state 16
    if_statement                   shift and go to state 17

state 66

    (15) break_statement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    INCLUDE         reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    FUNC            reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 15 (break_statement -> BREAK SEMICOLON .)
    $end            reduce using rule 15 (break_statement -> BREAK SEMICOLON .)


state 67

    (16) continue_statement -> CONTINUE SEMICOLON .

    IF              reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    INCLUDE         reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    FUNC            reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 16 (continue_statement -> CONTINUE SEMICOLON .)


state 68

    (3) statement_list -> statement_list statement .

    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 3 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    INCLUDE         reduce using rule 3 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 69

    (24) do_loop_statement -> DO compound_statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 70

    (79) function_decl_expression -> FUNC LPAREN . identifier_list RPAREN compound_statement
    (80) function_decl_expression -> FUNC LPAREN . RPAREN compound_statement
    (91) identifier_list -> . ID
    (92) identifier_list -> . identifier_list COMMA ID

    RPAREN          shift and go to state 110
    ID              shift and go to state 98

    identifier_list                shift and go to state 111

state 71

    (78) list_expression -> LBRACKET expression_list . RBRACKET
    (90) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 113
    COMMA           shift and go to state 112


state 72

    (77) list_expression -> LBRACKET RBRACKET .

    PLUS            reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    OR              reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    AND             reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    LT              reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    GT              reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    LEQ             reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    GEQ             reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    EQ              reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    NE              reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    COLON           reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    DOT             reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 77 (list_expression -> LBRACKET RBRACKET .)


state 73

    (89) expression_list -> expression .

    RPAREN          reduce using rule 89 (expression_list -> expression .)
    COMMA           reduce using rule 89 (expression_list -> expression .)
    RBRACKET        reduce using rule 89 (expression_list -> expression .)


state 74

    (63) string_literal -> QUOTATION_MARK string_chars . QUOTATION_MARK
    (65) string_chars -> string_chars . string_char
    (66) string_char -> . UNESCAPED
    (67) string_char -> . ESCAPE QUOTATION_MARK
    (68) string_char -> . ESCAPE BACKSLASH
    (69) string_char -> . ESCAPE BACKSPACE_CHAR
    (70) string_char -> . ESCAPE FORM_FEED_CHAR
    (71) string_char -> . ESCAPE LINE_FEED_CHAR
    (72) string_char -> . ESCAPE CARRIAGE_RETURN_CHAR
    (73) string_char -> . ESCAPE TAB_CHAR
    (74) string_char -> . ESCAPE UNICODE_HEX

    QUOTATION_MARK  shift and go to state 116
    UNESCAPED       shift and go to state 114
    ESCAPE          shift and go to state 115

    string_char                    shift and go to state 117

state 75

    (45) unary_expression -> STAR unary_expression .

    PLUS            reduce using rule 45 (unary_expression -> STAR unary_expression .)
    MINUS           reduce using rule 45 (unary_expression -> STAR unary_expression .)
    OR              reduce using rule 45 (unary_expression -> STAR unary_expression .)
    AND             reduce using rule 45 (unary_expression -> STAR unary_expression .)
    LT              reduce using rule 45 (unary_expression -> STAR unary_expression .)
    GT              reduce using rule 45 (unary_expression -> STAR unary_expression .)
    LEQ             reduce using rule 45 (unary_expression -> STAR unary_expression .)
    GEQ             reduce using rule 45 (unary_expression -> STAR unary_expression .)
    EQ              reduce using rule 45 (unary_expression -> STAR unary_expression .)
    NE              reduce using rule 45 (unary_expression -> STAR unary_expression .)
    SEMICOLON       reduce using rule 45 (unary_expression -> STAR unary_expression .)
    RBRACKET        reduce using rule 45 (unary_expression -> STAR unary_expression .)
    COMMA           reduce using rule 45 (unary_expression -> STAR unary_expression .)
    RPAREN          reduce using rule 45 (unary_expression -> STAR unary_expression .)
    COLON           reduce using rule 45 (unary_expression -> STAR unary_expression .)
    LBRACKET        reduce using rule 45 (unary_expression -> STAR unary_expression .)
    LPAREN          reduce using rule 45 (unary_expression -> STAR unary_expression .)
    DOT             reduce using rule 45 (unary_expression -> STAR unary_expression .)
    RBRACE          reduce using rule 45 (unary_expression -> STAR unary_expression .)


state 76

    (47) unary_expression -> MINUS binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    PLUS            reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    MINUS           reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    OR              reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    AND             reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    LT              reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    GT              reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    LEQ             reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    GEQ             reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    EQ              reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    NE              reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    SEMICOLON       reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    RBRACKET        reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    COMMA           reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    RPAREN          reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    COLON           reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    LBRACKET        reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    LPAREN          reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    DOT             reduce using rule 47 (unary_expression -> MINUS binary_expression .)
    RBRACE          reduce using rule 47 (unary_expression -> MINUS binary_expression .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 88 ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 86 ]
  ! LEQ             [ shift and go to state 89 ]
  ! GEQ             [ shift and go to state 85 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 77

    (49) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 118
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 78

    (50) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (51) postfix_expression -> postfix_expression LPAREN . RPAREN
    (89) expression_list -> . expression
    (90) expression_list -> . expression_list COMMA expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    RPAREN          shift and go to state 119
    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    expression_list                shift and go to state 120
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 73
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 79

    (52) postfix_expression -> postfix_expression DOT . identifier_name
    (93) identifier_name -> . ID

    ID              shift and go to state 48

    identifier_name                shift and go to state 121

state 80

    (59) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 122


state 81

    (85) dict_expression -> LBRACE RBRACE .

    LBRACKET        reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    LPAREN          reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    DOT             reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    PLUS            reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    MINUS           reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    OR              reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    AND             reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    LT              reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    GT              reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    LEQ             reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    GEQ             reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    EQ              reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    NE              reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    COMMA           reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    RPAREN          reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    COLON           reduce using rule 85 (dict_expression -> LBRACE RBRACE .)
    RBRACE          reduce using rule 85 (dict_expression -> LBRACE RBRACE .)


state 82

    (86) dict_expression -> LBRACE key_value_list . RBRACE
    (88) key_value_list -> key_value_list . COMMA expression COLON expression

    RBRACE          shift and go to state 123
    COMMA           shift and go to state 124


state 83

    (87) key_value_list -> expression . COLON expression

    COLON           shift and go to state 125


state 84

    (37) binary_expression -> binary_expression AND . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 126
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 85

    (41) binary_expression -> binary_expression GEQ . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 127
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 86

    (39) binary_expression -> binary_expression GT . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 128
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 87

    (43) binary_expression -> binary_expression NE . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 129
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 88

    (35) binary_expression -> binary_expression MINUS . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 130
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 89

    (40) binary_expression -> binary_expression LEQ . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 131
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 90

    (38) binary_expression -> binary_expression LT . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 132
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 91

    (34) binary_expression -> binary_expression PLUS . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 133
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 92

    (42) binary_expression -> binary_expression EQ . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 134
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 93

    (36) binary_expression -> binary_expression OR . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 135
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 94

    (46) unary_expression -> NOT binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    SEMICOLON       reduce using rule 46 (unary_expression -> NOT binary_expression .)
    RBRACKET        reduce using rule 46 (unary_expression -> NOT binary_expression .)
    COMMA           reduce using rule 46 (unary_expression -> NOT binary_expression .)
    RPAREN          reduce using rule 46 (unary_expression -> NOT binary_expression .)
    COLON           reduce using rule 46 (unary_expression -> NOT binary_expression .)
    LBRACKET        reduce using rule 46 (unary_expression -> NOT binary_expression .)
    LPAREN          reduce using rule 46 (unary_expression -> NOT binary_expression .)
    DOT             reduce using rule 46 (unary_expression -> NOT binary_expression .)
    RBRACE          reduce using rule 46 (unary_expression -> NOT binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88
    OR              shift and go to state 93
    AND             shift and go to state 84
    LT              shift and go to state 90
    GT              shift and go to state 86
    LEQ             shift and go to state 89
    GEQ             shift and go to state 85
    EQ              shift and go to state 92
    NE              shift and go to state 87

  ! PLUS            [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! MINUS           [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! OR              [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! AND             [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! LT              [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! GT              [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! LEQ             [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! GEQ             [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! EQ              [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]
  ! NE              [ reduce using rule 46 (unary_expression -> NOT binary_expression .) ]


state 95

    (19) return_statement -> RETURN expression SEMICOLON .

    IF              reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    INCLUDE         reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    FUNC            reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 19 (return_statement -> RETURN expression SEMICOLON .)


state 96

    (84) lambda_expression -> LAMBDA COLON . expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 136
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 97

    (83) lambda_expression -> LAMBDA identifier_list . COLON expression
    (92) identifier_list -> identifier_list . COMMA ID

    COLON           shift and go to state 137
    COMMA           shift and go to state 138


state 98

    (91) identifier_list -> ID .

    RPAREN          reduce using rule 91 (identifier_list -> ID .)
    COMMA           reduce using rule 91 (identifier_list -> ID .)
    COLON           reduce using rule 91 (identifier_list -> ID .)


state 99

    (81) named_function_decl -> FUNC ID LPAREN . identifier_list RPAREN compound_statement
    (82) named_function_decl -> FUNC ID LPAREN . RPAREN compound_statement
    (91) identifier_list -> . ID
    (92) identifier_list -> . identifier_list COMMA ID

    RPAREN          shift and go to state 139
    ID              shift and go to state 98

    identifier_list                shift and go to state 140

state 100

    (25) while_loop_statement -> WHILE LPAREN expression . RPAREN compound_statement

    RPAREN          shift and go to state 141


state 101

    (14) assignment_statement -> lvalue ASSIGN_PLUS expression . SEMICOLON

    SEMICOLON       shift and go to state 142


state 102

    (31) lvalue -> lvalue LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 143


state 103

    (13) assignment_statement -> lvalue ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 144


state 104

    (30) lvalue -> lvalue DOT ID .

    ASSIGN          reduce using rule 30 (lvalue -> lvalue DOT ID .)
    ASSIGN_PLUS     reduce using rule 30 (lvalue -> lvalue DOT ID .)
    DOT             reduce using rule 30 (lvalue -> lvalue DOT ID .)
    LBRACKET        reduce using rule 30 (lvalue -> lvalue DOT ID .)


state 105

    (23) for_loop_statement -> FOR LPAREN ID . IN expression RPAREN compound_statement

    IN              shift and go to state 145


state 106

    (17) include_statement -> INCLUDE expression SEMICOLON .

    RBRACE          reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    IF              reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    BREAK           reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    CONTINUE        reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    RETURN          reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    INCLUDE         reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    LBRACE          reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    FUNC            reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    ID              reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    FOR             reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    DO              reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    WHILE           reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)
    $end            reduce using rule 17 (include_statement -> INCLUDE expression SEMICOLON .)


state 107

    (27) if_statement -> IF LPAREN expression . RPAREN compound_statement
    (28) if_statement -> IF LPAREN expression . RPAREN compound_statement ELSE compound_statement

    RPAREN          shift and go to state 146


state 108

    (26) compound_statement -> LBRACE statement_list RBRACE .

    IF              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    INCLUDE         reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    DOT             reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    OR              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    LEQ             reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    GEQ             reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    COLON           reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 26 (compound_statement -> LBRACE statement_list RBRACE .)


state 109

    (24) do_loop_statement -> DO compound_statement WHILE LPAREN . expression RPAREN SEMICOLON
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 147
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 110

    (80) function_decl_expression -> FUNC LPAREN RPAREN . compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 148

state 111

    (79) function_decl_expression -> FUNC LPAREN identifier_list . RPAREN compound_statement
    (92) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 149
    COMMA           shift and go to state 138


state 112

    (90) expression_list -> expression_list COMMA . expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 150
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 113

    (78) list_expression -> LBRACKET expression_list RBRACKET .

    PLUS            reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    LEQ             reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    GEQ             reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    NE              reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    LPAREN          reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)
    RBRACE          reduce using rule 78 (list_expression -> LBRACKET expression_list RBRACKET .)


state 114

    (66) string_char -> UNESCAPED .

    QUOTATION_MARK  reduce using rule 66 (string_char -> UNESCAPED .)
    UNESCAPED       reduce using rule 66 (string_char -> UNESCAPED .)
    ESCAPE          reduce using rule 66 (string_char -> UNESCAPED .)


state 115

    (67) string_char -> ESCAPE . QUOTATION_MARK
    (68) string_char -> ESCAPE . BACKSLASH
    (69) string_char -> ESCAPE . BACKSPACE_CHAR
    (70) string_char -> ESCAPE . FORM_FEED_CHAR
    (71) string_char -> ESCAPE . LINE_FEED_CHAR
    (72) string_char -> ESCAPE . CARRIAGE_RETURN_CHAR
    (73) string_char -> ESCAPE . TAB_CHAR
    (74) string_char -> ESCAPE . UNICODE_HEX

    QUOTATION_MARK  shift and go to state 157
    BACKSLASH       shift and go to state 153
    BACKSPACE_CHAR  shift and go to state 151
    FORM_FEED_CHAR  shift and go to state 156
    LINE_FEED_CHAR  shift and go to state 152
    CARRIAGE_RETURN_CHAR shift and go to state 154
    TAB_CHAR        shift and go to state 158
    UNICODE_HEX     shift and go to state 155


state 116

    (63) string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .

    LBRACKET        reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    LPAREN          reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    DOT             reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    PLUS            reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    MINUS           reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    OR              reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    AND             reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    LT              reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    GT              reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    LEQ             reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    GEQ             reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    EQ              reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    NE              reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    RPAREN          reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    SEMICOLON       reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    RBRACKET        reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    COMMA           reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    COLON           reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    RBRACE          reduce using rule 63 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)


state 117

    (65) string_chars -> string_chars string_char .

    QUOTATION_MARK  reduce using rule 65 (string_chars -> string_chars string_char .)
    UNESCAPED       reduce using rule 65 (string_chars -> string_chars string_char .)
    ESCAPE          reduce using rule 65 (string_chars -> string_chars string_char .)


state 118

    (49) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 159


state 119

    (51) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEQ             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GEQ             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 120

    (50) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (90) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 112


state 121

    (52) postfix_expression -> postfix_expression DOT identifier_name .

    LBRACKET        reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    LPAREN          reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    DOT             reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    PLUS            reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    MINUS           reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    OR              reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    AND             reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    LT              reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    GT              reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    LEQ             reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    GEQ             reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    EQ              reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    NE              reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    RPAREN          reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    RBRACKET        reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    COMMA           reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    SEMICOLON       reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    COLON           reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)
    RBRACE          reduce using rule 52 (postfix_expression -> postfix_expression DOT identifier_name .)


state 122

    (59) primary_expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 59 (primary_expression -> LPAREN expression RPAREN .)


state 123

    (86) dict_expression -> LBRACE key_value_list RBRACE .

    LBRACKET        reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    LPAREN          reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    DOT             reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    PLUS            reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    MINUS           reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    OR              reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    AND             reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    LT              reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    GT              reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    LEQ             reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    GEQ             reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    EQ              reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    NE              reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    SEMICOLON       reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    RBRACKET        reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    COMMA           reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    RPAREN          reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    COLON           reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)
    RBRACE          reduce using rule 86 (dict_expression -> LBRACE key_value_list RBRACE .)


state 124

    (88) key_value_list -> key_value_list COMMA . expression COLON expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    list_expression                shift and go to state 43
    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 161
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 125

    (87) key_value_list -> expression COLON . expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 162
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 126

    (37) binary_expression -> binary_expression AND binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    SEMICOLON       reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    LBRACKET        reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    LPAREN          reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    DOT             reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88
    LT              shift and go to state 90
    GT              shift and go to state 86
    LEQ             shift and go to state 89
    GEQ             shift and go to state 85
    EQ              shift and go to state 92
    NE              shift and go to state 87

  ! PLUS            [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LEQ             [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GEQ             [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 37 (binary_expression -> binary_expression AND binary_expression .) ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]


state 127

    (41) binary_expression -> binary_expression GEQ binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    AND             reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    LT              reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    GT              reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    LEQ             reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    GEQ             reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    EQ              reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    NE              reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    SEMICOLON       reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    RBRACKET        reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    COMMA           reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    RPAREN          reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    COLON           reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    LBRACKET        reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    LPAREN          reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    DOT             reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    RBRACE          reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88

  ! PLUS            [ reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 41 (binary_expression -> binary_expression GEQ binary_expression .) ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 86 ]
  ! LEQ             [ shift and go to state 89 ]
  ! GEQ             [ shift and go to state 85 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 128

    (39) binary_expression -> binary_expression GT binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    LEQ             reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    GEQ             reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    SEMICOLON       reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    LBRACKET        reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    LPAREN          reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    DOT             reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88

  ! PLUS            [ reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 39 (binary_expression -> binary_expression GT binary_expression .) ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 86 ]
  ! LEQ             [ shift and go to state 89 ]
  ! GEQ             [ shift and go to state 85 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 129

    (43) binary_expression -> binary_expression NE binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    SEMICOLON       reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    LBRACKET        reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    LPAREN          reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    DOT             reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88
    LT              shift and go to state 90
    GT              shift and go to state 86
    LEQ             shift and go to state 89
    GEQ             shift and go to state 85

  ! PLUS            [ reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LEQ             [ reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GEQ             [ reduce using rule 43 (binary_expression -> binary_expression NE binary_expression .) ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 130

    (35) binary_expression -> binary_expression MINUS binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    PLUS            reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    LEQ             reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    GEQ             reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMICOLON       reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    LBRACKET        reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    LPAREN          reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    DOT             reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 88 ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 86 ]
  ! LEQ             [ shift and go to state 89 ]
  ! GEQ             [ shift and go to state 85 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 131

    (40) binary_expression -> binary_expression LEQ binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    AND             reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    LT              reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    GT              reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    LEQ             reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    GEQ             reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    EQ              reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    NE              reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    SEMICOLON       reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    RBRACKET        reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    COMMA           reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    RPAREN          reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    COLON           reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    LBRACKET        reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    LPAREN          reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    DOT             reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    RBRACE          reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88

  ! PLUS            [ reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 40 (binary_expression -> binary_expression LEQ binary_expression .) ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 86 ]
  ! LEQ             [ shift and go to state 89 ]
  ! GEQ             [ shift and go to state 85 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 132

    (38) binary_expression -> binary_expression LT binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    LEQ             reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    GEQ             reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    SEMICOLON       reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    LBRACKET        reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    LPAREN          reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    DOT             reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88

  ! PLUS            [ reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 38 (binary_expression -> binary_expression LT binary_expression .) ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 86 ]
  ! LEQ             [ shift and go to state 89 ]
  ! GEQ             [ shift and go to state 85 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 133

    (34) binary_expression -> binary_expression PLUS binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    PLUS            reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    LEQ             reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    GEQ             reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMICOLON       reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    LBRACKET        reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    LPAREN          reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    DOT             reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 88 ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 90 ]
  ! GT              [ shift and go to state 86 ]
  ! LEQ             [ shift and go to state 89 ]
  ! GEQ             [ shift and go to state 85 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 134

    (42) binary_expression -> binary_expression EQ binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    SEMICOLON       reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    LBRACKET        reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    LPAREN          reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    DOT             reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88
    LT              shift and go to state 90
    GT              shift and go to state 86
    LEQ             shift and go to state 89
    GEQ             shift and go to state 85

  ! PLUS            [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LEQ             [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GEQ             [ reduce using rule 42 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! OR              [ shift and go to state 93 ]
  ! AND             [ shift and go to state 84 ]
  ! EQ              [ shift and go to state 92 ]
  ! NE              [ shift and go to state 87 ]


state 135

    (36) binary_expression -> binary_expression OR binary_expression .
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . OR binary_expression
    (37) binary_expression -> binary_expression . AND binary_expression
    (38) binary_expression -> binary_expression . LT binary_expression
    (39) binary_expression -> binary_expression . GT binary_expression
    (40) binary_expression -> binary_expression . LEQ binary_expression
    (41) binary_expression -> binary_expression . GEQ binary_expression
    (42) binary_expression -> binary_expression . EQ binary_expression
    (43) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    SEMICOLON       reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    LBRACKET        reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    LPAREN          reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    DOT             reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 88
    AND             shift and go to state 84
    LT              shift and go to state 90
    GT              shift and go to state 86
    LEQ             shift and go to state 89
    GEQ             shift and go to state 85
    EQ              shift and go to state 92
    NE              shift and go to state 87

  ! PLUS            [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LEQ             [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GEQ             [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 36 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 93 ]


state 136

    (84) lambda_expression -> LAMBDA COLON expression .

    PLUS            reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    MINUS           reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    OR              reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    AND             reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    LT              reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    GT              reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    LEQ             reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    GEQ             reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    EQ              reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    NE              reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    SEMICOLON       reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    RBRACKET        reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    COMMA           reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    RPAREN          reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    COLON           reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    LBRACKET        reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    LPAREN          reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    DOT             reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)
    RBRACE          reduce using rule 84 (lambda_expression -> LAMBDA COLON expression .)


state 137

    (83) lambda_expression -> LAMBDA identifier_list COLON . expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 163
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 138

    (92) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 164


state 139

    (82) named_function_decl -> FUNC ID LPAREN RPAREN . compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 165

state 140

    (81) named_function_decl -> FUNC ID LPAREN identifier_list . RPAREN compound_statement
    (92) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 138


state 141

    (25) while_loop_statement -> WHILE LPAREN expression RPAREN . compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 167

state 142

    (14) assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .

    IF              reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    BREAK           reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    CONTINUE        reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    RETURN          reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    INCLUDE         reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    LBRACE          reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    FUNC            reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    ID              reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    FOR             reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    DO              reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    WHILE           reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    $end            reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    RBRACE          reduce using rule 14 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)


state 143

    (31) lvalue -> lvalue LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 31 (lvalue -> lvalue LBRACKET expression RBRACKET .)
    ASSIGN_PLUS     reduce using rule 31 (lvalue -> lvalue LBRACKET expression RBRACKET .)
    DOT             reduce using rule 31 (lvalue -> lvalue LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 31 (lvalue -> lvalue LBRACKET expression RBRACKET .)


state 144

    (13) assignment_statement -> lvalue ASSIGN expression SEMICOLON .

    IF              reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    CONTINUE        reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    INCLUDE         reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    FUNC            reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    ID              reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    DO              reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    $end            reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 13 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)


state 145

    (23) for_loop_statement -> FOR LPAREN ID IN . expression RPAREN compound_statement
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    list_expression                shift and go to state 43
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 168
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 146

    (27) if_statement -> IF LPAREN expression RPAREN . compound_statement
    (28) if_statement -> IF LPAREN expression RPAREN . compound_statement ELSE compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 169

state 147

    (24) do_loop_statement -> DO compound_statement WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 170


state 148

    (80) function_decl_expression -> FUNC LPAREN RPAREN compound_statement .

    LBRACKET        reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    LPAREN          reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    DOT             reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    PLUS            reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    MINUS           reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    OR              reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    AND             reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    LT              reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    GT              reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    LEQ             reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    GEQ             reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    EQ              reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    NE              reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    RBRACE          reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    COMMA           reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    SEMICOLON       reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    RBRACKET        reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    RPAREN          reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    COLON           reduce using rule 80 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)


state 149

    (79) function_decl_expression -> FUNC LPAREN identifier_list RPAREN . compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 171

state 150

    (90) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 90 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 90 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 90 (expression_list -> expression_list COMMA expression .)


state 151

    (69) string_char -> ESCAPE BACKSPACE_CHAR .

    QUOTATION_MARK  reduce using rule 69 (string_char -> ESCAPE BACKSPACE_CHAR .)
    UNESCAPED       reduce using rule 69 (string_char -> ESCAPE BACKSPACE_CHAR .)
    ESCAPE          reduce using rule 69 (string_char -> ESCAPE BACKSPACE_CHAR .)


state 152

    (71) string_char -> ESCAPE LINE_FEED_CHAR .

    QUOTATION_MARK  reduce using rule 71 (string_char -> ESCAPE LINE_FEED_CHAR .)
    UNESCAPED       reduce using rule 71 (string_char -> ESCAPE LINE_FEED_CHAR .)
    ESCAPE          reduce using rule 71 (string_char -> ESCAPE LINE_FEED_CHAR .)


state 153

    (68) string_char -> ESCAPE BACKSLASH .

    QUOTATION_MARK  reduce using rule 68 (string_char -> ESCAPE BACKSLASH .)
    UNESCAPED       reduce using rule 68 (string_char -> ESCAPE BACKSLASH .)
    ESCAPE          reduce using rule 68 (string_char -> ESCAPE BACKSLASH .)


state 154

    (72) string_char -> ESCAPE CARRIAGE_RETURN_CHAR .

    QUOTATION_MARK  reduce using rule 72 (string_char -> ESCAPE CARRIAGE_RETURN_CHAR .)
    UNESCAPED       reduce using rule 72 (string_char -> ESCAPE CARRIAGE_RETURN_CHAR .)
    ESCAPE          reduce using rule 72 (string_char -> ESCAPE CARRIAGE_RETURN_CHAR .)


state 155

    (74) string_char -> ESCAPE UNICODE_HEX .

    QUOTATION_MARK  reduce using rule 74 (string_char -> ESCAPE UNICODE_HEX .)
    UNESCAPED       reduce using rule 74 (string_char -> ESCAPE UNICODE_HEX .)
    ESCAPE          reduce using rule 74 (string_char -> ESCAPE UNICODE_HEX .)


state 156

    (70) string_char -> ESCAPE FORM_FEED_CHAR .

    QUOTATION_MARK  reduce using rule 70 (string_char -> ESCAPE FORM_FEED_CHAR .)
    UNESCAPED       reduce using rule 70 (string_char -> ESCAPE FORM_FEED_CHAR .)
    ESCAPE          reduce using rule 70 (string_char -> ESCAPE FORM_FEED_CHAR .)


state 157

    (67) string_char -> ESCAPE QUOTATION_MARK .

    QUOTATION_MARK  reduce using rule 67 (string_char -> ESCAPE QUOTATION_MARK .)
    UNESCAPED       reduce using rule 67 (string_char -> ESCAPE QUOTATION_MARK .)
    ESCAPE          reduce using rule 67 (string_char -> ESCAPE QUOTATION_MARK .)


state 158

    (73) string_char -> ESCAPE TAB_CHAR .

    QUOTATION_MARK  reduce using rule 73 (string_char -> ESCAPE TAB_CHAR .)
    UNESCAPED       reduce using rule 73 (string_char -> ESCAPE TAB_CHAR .)
    ESCAPE          reduce using rule 73 (string_char -> ESCAPE TAB_CHAR .)


state 159

    (49) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LEQ             reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GEQ             reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 49 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 160

    (50) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LBRACKET        reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OR              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    AND             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LT              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GT              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LEQ             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GEQ             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQ              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NE              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RBRACE          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 161

    (88) key_value_list -> key_value_list COMMA expression . COLON expression

    COLON           shift and go to state 172


state 162

    (87) key_value_list -> expression COLON expression .

    RBRACE          reduce using rule 87 (key_value_list -> expression COLON expression .)
    COMMA           reduce using rule 87 (key_value_list -> expression COLON expression .)


state 163

    (83) lambda_expression -> LAMBDA identifier_list COLON expression .

    PLUS            reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    MINUS           reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    OR              reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    AND             reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LT              reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    GT              reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LEQ             reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    GEQ             reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    EQ              reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    NE              reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    SEMICOLON       reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    RBRACKET        reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    COMMA           reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    RPAREN          reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    COLON           reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LBRACKET        reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LPAREN          reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    DOT             reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    RBRACE          reduce using rule 83 (lambda_expression -> LAMBDA identifier_list COLON expression .)


state 164

    (92) identifier_list -> identifier_list COMMA ID .

    RPAREN          reduce using rule 92 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 92 (identifier_list -> identifier_list COMMA ID .)
    COLON           reduce using rule 92 (identifier_list -> identifier_list COMMA ID .)


state 165

    (82) named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .

    RBRACE          reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    IF              reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    BREAK           reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    CONTINUE        reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    RETURN          reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    INCLUDE         reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    LBRACE          reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    FUNC            reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    ID              reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    FOR             reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    DO              reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    WHILE           reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    $end            reduce using rule 82 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)


state 166

    (81) named_function_decl -> FUNC ID LPAREN identifier_list RPAREN . compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 173

state 167

    (25) while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .

    IF              reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    BREAK           reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    INCLUDE         reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    FUNC            reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    ID              reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    FOR             reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    DO              reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    $end            reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    RBRACE          reduce using rule 25 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)


state 168

    (23) for_loop_statement -> FOR LPAREN ID IN expression . RPAREN compound_statement

    RPAREN          shift and go to state 174


state 169

    (27) if_statement -> IF LPAREN expression RPAREN compound_statement .
    (28) if_statement -> IF LPAREN expression RPAREN compound_statement . ELSE compound_statement

    IF              reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    BREAK           reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    INCLUDE         reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    FUNC            reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    ID              reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    FOR             reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    DO              reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    $end            reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    RBRACE          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    ELSE            shift and go to state 175


state 170

    (24) do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 176


state 171

    (79) function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .

    LBRACKET        reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    LPAREN          reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    DOT             reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    PLUS            reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    MINUS           reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    OR              reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    AND             reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    LT              reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    GT              reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    LEQ             reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    GEQ             reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    EQ              reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    NE              reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    RBRACE          reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    COMMA           reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    SEMICOLON       reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    RBRACKET        reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    RPAREN          reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    COLON           reduce using rule 79 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)


state 172

    (88) key_value_list -> key_value_list COMMA expression COLON . expression
    (32) expression -> . binary_expression
    (33) binary_expression -> . unary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression OR binary_expression
    (37) binary_expression -> . binary_expression AND binary_expression
    (38) binary_expression -> . binary_expression LT binary_expression
    (39) binary_expression -> . binary_expression GT binary_expression
    (40) binary_expression -> . binary_expression LEQ binary_expression
    (41) binary_expression -> . binary_expression GEQ binary_expression
    (42) binary_expression -> . binary_expression EQ binary_expression
    (43) binary_expression -> . binary_expression NE binary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . STAR unary_expression
    (46) unary_expression -> . NOT binary_expression
    (47) unary_expression -> . MINUS binary_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (50) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression DOT identifier_name
    (53) primary_expression -> . identifier_name
    (54) primary_expression -> . list_expression
    (55) primary_expression -> . constant
    (56) primary_expression -> . function_decl_expression
    (57) primary_expression -> . lambda_expression
    (58) primary_expression -> . dict_expression
    (59) primary_expression -> . LPAREN expression RPAREN
    (93) identifier_name -> . ID
    (77) list_expression -> . LBRACKET RBRACKET
    (78) list_expression -> . LBRACKET expression_list RBRACKET
    (60) constant -> . INT_LITERAL
    (61) constant -> . string_literal
    (62) constant -> . boolean_literal
    (79) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (80) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (83) lambda_expression -> . LAMBDA identifier_list COLON expression
    (84) lambda_expression -> . LAMBDA COLON expression
    (85) dict_expression -> . LBRACE RBRACE
    (86) dict_expression -> . LBRACE key_value_list RBRACE
    (63) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (75) boolean_literal -> . TRUE
    (76) boolean_literal -> . FALSE

    STAR            shift and go to state 35
    NOT             shift and go to state 52
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 46
    ID              shift and go to state 48
    LBRACKET        shift and go to state 33
    INT_LITERAL     shift and go to state 44
    FUNC            shift and go to state 29
    LAMBDA          shift and go to state 55
    LBRACE          shift and go to state 49
    QUOTATION_MARK  shift and go to state 34
    TRUE            shift and go to state 37
    FALSE           shift and go to state 50

    list_expression                shift and go to state 43
    constant                       shift and go to state 41
    binary_expression              shift and go to state 51
    unary_expression               shift and go to state 30
    lambda_expression              shift and go to state 31
    postfix_expression             shift and go to state 40
    boolean_literal                shift and go to state 32
    primary_expression             shift and go to state 45
    function_decl_expression       shift and go to state 47
    identifier_name                shift and go to state 36
    expression                     shift and go to state 177
    dict_expression                shift and go to state 54
    string_literal                 shift and go to state 42

state 173

    (81) named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .

    RBRACE          reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    IF              reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    BREAK           reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    CONTINUE        reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    RETURN          reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    INCLUDE         reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    LBRACE          reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    FUNC            reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    ID              reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    FOR             reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    DO              reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    WHILE           reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    $end            reduce using rule 81 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)


state 174

    (23) for_loop_statement -> FOR LPAREN ID IN expression RPAREN . compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 178

state 175

    (28) if_statement -> IF LPAREN expression RPAREN compound_statement ELSE . compound_statement
    (26) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 179

state 176

    (24) do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FUNC            reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 24 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 177

    (88) key_value_list -> key_value_list COMMA expression COLON expression .

    RBRACE          reduce using rule 88 (key_value_list -> key_value_list COMMA expression COLON expression .)
    COMMA           reduce using rule 88 (key_value_list -> key_value_list COMMA expression COLON expression .)


state 178

    (23) for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .

    IF              reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    BREAK           reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    RETURN          reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    INCLUDE         reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    FUNC            reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    ID              reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    FOR             reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    DO              reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    WHILE           reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    $end            reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    RBRACE          reduce using rule 23 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)


state 179

    (28) if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .

    IF              reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    BREAK           reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    CONTINUE        reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    RETURN          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    INCLUDE         reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    LBRACE          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    FUNC            reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    ID              reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    FOR             reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    DO              reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    WHILE           reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    $end            reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    RBRACE          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 40 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 40 resolved as shift
WARNING: shift/reduce conflict for DOT in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for OR in state 51 resolved as shift
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 51 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 51 resolved as shift
WARNING: shift/reduce conflict for EQ in state 51 resolved as shift
WARNING: shift/reduce conflict for NE in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for LT in state 94 resolved as shift
WARNING: shift/reduce conflict for GT in state 94 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 94 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NE in state 94 resolved as shift
